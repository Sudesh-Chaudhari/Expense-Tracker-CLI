    # Uncomment the following block to add an 'id' column if it doesn't exist
    # Note: This is a workaround since SQLite doesn't support adding an auto-increment primary key
    # To reset the auto increment, we create a new table and copy data over with row numbers if the 'id' column already exists, this block should be skipped or modified accordingly

    # sql_statements = """
    #     CREATE TABLE temp_expenses AS SELECT row_number() OVER () AS id, date, category, amount, note FROM expenses;
    #     DELETE FROM expenses WHERE id IS NULL;
    #     DROP TABLE expenses;
    #     ALTER TABLE temp_expenses RENAME TO expenses;
    #     """

    # conn = sqlite3.connect('expenses.db')
    # cursor = conn.cursor()

    # try:
    #     # Execute the SQL statements
    #     cursor.executescript(sql_statements)
    #     conn.commit()  # Commit the changes to the database
    #     print("Table 'expenses' successfully modified with 'id' column.")
    # except sqlite3.Error as e:
    #     print(f"An error occurred: {e}")
    #     conn.rollback()  # Rollback changes if an error occurs
    # finally:
    #     # Close the connection
    #     conn.close()

    # For debugging: print the current schema of the expenses table
    # import sqlite3
    # conn = sqlite3.connect("expenses.db")
    # cursor = conn.cursor()
    # cursor.execute("SELECT sql FROM sqlite_master WHERE type='table' AND name='expenses'")
    # print(cursor.fetchone()[0])
    # conn.close()
    # print("\nCurrent schema of 'expenses' table displayed above.")    # Uncomment the following block to add an 'id' column if it doesn't exist
    # Note: This is a workaround since SQLite doesn't support adding an auto-increment primary key
    # To reset the auto increment, we create a new table and copy data over with row numbers if the 'id' column already exists, this block should be skipped or modified accordingly

    # sql_statements = """
    #     CREATE TABLE temp_expenses AS SELECT row_number() OVER () AS id, date, category, amount, note FROM expenses;
    #     DELETE FROM expenses WHERE id IS NULL;
    #     DROP TABLE expenses;
    #     ALTER TABLE temp_expenses RENAME TO expenses;
    #     """

    # conn = sqlite3.connect('expenses.db')
    # cursor = conn.cursor()

    # try:
    #     # Execute the SQL statements
    #     cursor.executescript(sql_statements)
    #     conn.commit()  # Commit the changes to the database
    #     print("Table 'expenses' successfully modified with 'id' column.")
    # except sqlite3.Error as e:
    #     print(f"An error occurred: {e}")
    #     conn.rollback()  # Rollback changes if an error occurs
    # finally:
    #     # Close the connection
    #     conn.close()

    # For debugging: print the current schema of the expenses table
    # import sqlite3
    # conn = sqlite3.connect("expenses.db")
    # cursor = conn.cursor()
    # cursor.execute("SELECT sql FROM sqlite_master WHERE type='table' AND name='expenses'")
    # print(cursor.fetchone()[0])
    # conn.close()
    # print("\nCurrent schema of 'expenses' table displayed above.")

    # cd Cpp_Python_SQL/Python_Projects/Expense_Tracker
    # python main.py
    # cd F:/Files/Practice/.venv/Scripts/Activate.ps1
